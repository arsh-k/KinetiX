# Function to calculate the total thermal diffusion ratio
import numpy as np

def calculate_diffusion_ratio(coefficients, Xi, T):
    T2 = T ** 2
    T3 = T ** 3
    diffusion_ratio = 0.0
    for (i, j), (a, b, c, d) in coefficients.items():
        diffusion_ratio += Xi[i] * Xi[j] * (a + b * T + c * T2 + d * T3)
    return diffusion_ratio

# Coefficients for H2 and H from the first dataset
coefficients_first_H2 = {
    (0, 1): (0.443E+00, 0.712E-04, -0.385E-07, 0.686E-11),
    (0, 2): (0.602E-01, 0.562E-03, -0.255E-06, 0.363E-10),
    (0, 3): (-0.153E+00, -0.546E-04, 0.293E-07, -0.487E-11),
    (0, 4): (0.416E+00, 0.110E-04, -0.396E-08, 0.114E-11),
    (0, 5): (0.422E+00, 0.111E-04, -0.402E-08, 0.116E-11),
    (0, 6): (0.444E+00, 0.715E-04, -0.386E-07, 0.689E-11),
    (0, 7): (0.446E+00, 0.717E-04, -0.388E-07, 0.691E-11),
    (0, 8): (0.445E+00, 0.495E-04, -0.263E-07, 0.490E-11)
}

coefficients_first_H = {
    (3, 0): (0.153E+00, 0.546E-04, -0.293E-07, 0.487E-11),
    (3, 1): (0.220E+00, 0.480E-03, -0.233E-06, 0.346E-10),
    (3, 2): (-0.142E+00, 0.767E-03, -0.307E-06, 0.403E-10),
    (3, 4): (0.270E+00, 0.362E-03, -0.181E-06, 0.275E-10),
    (3, 5): (0.272E+00, 0.364E-03, -0.182E-06, 0.277E-10),
    (3, 6): (0.221E+00, 0.481E-03, -0.233E-06, 0.347E-10),
    (3, 7): (0.221E+00, 0.482E-03, -0.234E-06, 0.348E-10),
    (3, 8): (0.241E+00, 0.445E-03, -0.218E-06, 0.327E-10)
}

coefficients_gri_H2 = {
    (0, 1): (-0.144, -8e-05, 4.9e-08, -9.14e-12),
    (0, 2): (0.407, 3.85e-05, -2.55e-08, 5.86e-12),
    (0, 3): (0.427, 0.00012, -7.67e-08, 1.52e-11),
    (0, 4): (0.413, 3.91e-05, -2.59e-08, 5.95e-12),
    (0, 5): (0.0227, 0.000673, -3.41e-07, 5.48e-11),
    (0, 6): (0.428, 0.000121, -7.7e-08, 1.53e-11),
    (0, 7): (0.43, 0.000121, -7.73e-08, 1.53e-11),
    (0, 8): (0.382, 1.47e-05, -9.76e-09, 2.83e-12),
    (0, 9): (0.383, 3.63e-05, -2.4e-08, 5.53e-12),
    (0, 10): (0.325, 0.000178, -1.09e-07, 2.04e-11),
    (0, 11): (0.325, 0.000178, -1.09e-07, 2.04e-11),
    (0, 12): (0.331, 0.000181, -1.11e-07, 2.08e-11),
    (0, 13): (0.34, 0.000179, -1.1e-07, 2.06e-11),
    (0, 14): (0.431, 9.36e-05, -6.04e-08, 1.23e-11),
    (0, 15): (0.293, 0.000401, -2.31e-07, 4.05e-11),
    (0, 16): (0.122, 0.000618, -3.28e-07, 5.45e-11),
    (0, 17): (0.123, 0.000621, -3.3e-07, 5.47e-11),
    (0, 18): (0.14, 0.000601, -3.22e-07, 5.37e-11),
    (0, 19): (0.14, 0.000601, -3.22e-07, 5.37e-11),
    (0, 20): (0.131, 0.000616, -3.29e-07, 5.46e-11),
    (0, 21): (0.304, 0.000322, -1.89e-07, 3.37e-11),
    (0, 22): (0.306, 0.000325, -1.9e-07, 3.39e-11),
    (0, 23): (0.307, 0.000326, -1.91e-07, 3.41e-11),
    (0, 24): (0.249, 0.000429, -2.43e-07, 4.21e-11),
    (0, 25): (0.273, 0.000394, -2.26e-07, 3.95e-11),
    (0, 26): (0.274, 0.000396, -2.27e-07, 3.97e-11),
    (0, 27): (0.386, 0.000229, -1.39e-07, 2.59e-11),
    (0, 28): (0.159, 0.000603, -3.25e-07, 5.44e-11),
    (0, 29): (0.159, 0.000603, -3.25e-07, 5.44e-11),
    (0, 30): (0.401, 1.55e-05, -1.03e-08, 2.97e-12),
    (0, 31): (0.4, 3.78e-05, -2.51e-08, 5.77e-12),
    (0, 32): (0.407, 3.85e-05, -2.55e-08, 5.87e-12),
    (0, 33): (0.0877, 0.00059, -3.09e-07, 5.09e-11),
    (0, 34): (0.467, 1.8e-05, -1.19e-08, 3.46e-12),
    (0, 35): (0.435, 9.29e-05, -6e-08, 1.23e-11),
    (0, 36): (0.336, 0.000331, -1.95e-07, 3.49e-11),
    (0, 37): (0.304, 0.000384, -2.22e-07, 3.91e-11),
    (0, 38): (0.413, 0.000144, -9.07e-08, 1.76e-11),
    (0, 39): (0.455, 2.81e-05, -1.87e-08, 4.72e-12),
    (0, 40): (0.0906, 0.000651, -3.4e-07, 5.59e-11),
    (0, 41): (0.0911, 0.000654, -3.42e-07, 5.62e-11),
    (0, 42): (0.386, 0.000229, -1.39e-07, 2.59e-11),
    (0, 43): (0.303, 0.000383, -2.21e-07, 3.91e-11),
    (0, 44): (0.303, 0.000383, -2.21e-07, 3.91e-11),
    (0, 45): (0.303, 0.000383, -2.21e-07, 3.91e-11),
    (0, 46): (0.302, 0.000382, -2.21e-07, 3.9e-11),
    (0, 47): (0.431, 9.21e-05, -5.95e-08, 1.21e-11),
    (0, 48): (0.401, 0.000197, -1.22e-07, 2.29e-11),
    (0, 49): (0.273, 0.000433, -2.46e-07, 4.29e-11),
    (0, 50): (0.274, 0.000434, -2.47e-07, 4.3e-11),
    (0, 51): (0.16, 0.000604, -3.26e-07, 5.45e-11),
    (0, 52): (0.16, 0.000605, -3.26e-07, 5.46e-11),
}
coefficients_gri_H = {
    (1, 0): (0.144, 8e-05, -4.9e-08, 9.14e-12),
    (1, 2): (0.235, 0.000466, -2.61e-07, 4.49e-11),
    (1, 3): (0.18, 0.000602, -3.26e-07, 5.49e-11),
    (1, 4): (0.237, 0.000469, -2.63e-07, 4.53e-11),
    (1, 5): (-0.174, 0.000862, -3.8e-07, 5.6e-11),
    (1, 6): (0.18, 0.000603, -3.27e-07, 5.5e-11),
    (1, 7): (0.181, 0.000604, -3.28e-07, 5.51e-11),
    (1, 8): (0.249, 0.000409, -2.32e-07, 4.03e-11),
    (1, 9): (0.229, 0.000452, -2.53e-07, 4.36e-11),
    (1, 10): (0.0991, 0.000644, -3.38e-07, 5.57e-11),
    (1, 11): (0.0991, 0.000644, -3.38e-07, 5.57e-11),
    (1, 12): (0.1, 0.00065, -3.42e-07, 5.63e-11),
    (1, 13): (0.105, 0.000651, -3.43e-07, 5.65e-11),
    (1, 14): (0.2, 0.000565, -3.09e-07, 5.24e-11),
    (1, 15): (-0.02, 0.00085, -4.21e-07, 6.68e-11),
    (1, 16): (-0.161, 0.000904, -4.07e-07, 6.09e-11),
    (1, 17): (-0.161, 0.000906, -4.08e-07, 6.11e-11),
    (1, 18): (-0.131, 0.000904, -4.18e-07, 6.36e-11),
    (1, 19): (-0.131, 0.000904, -4.18e-07, 6.36e-11),
    (1, 20): (-0.157, 0.00091, -4.12e-07, 6.18e-11),
    (1, 21): (0.0163, 0.000788, -3.97e-07, 6.37e-11),
    (1, 22): (0.0163, 0.00079, -3.98e-07, 6.39e-11),
    (1, 23): (0.0164, 0.000792, -3.99e-07, 6.41e-11),
    (1, 24): (-0.0509, 0.000854, -4.16e-07, 6.53e-11),
    (1, 25): (-0.0272, 0.000837, -4.13e-07, 6.53e-11),
    (1, 26): (-0.0272, 0.000839, -4.14e-07, 6.55e-11),
    (1, 27): (0.0987, 0.000721, -3.77e-07, 6.19e-11),
    (1, 28): (-0.142, 0.000921, -4.23e-07, 6.41e-11),
    (1, 29): (-0.142, 0.000921, -4.23e-07, 6.41e-11),
    (1, 30): (0.255, 0.000419, -2.38e-07, 4.13e-11),
    (1, 31): (0.233, 0.000462, -2.59e-07, 4.46e-11),
    (1, 32): (0.235, 0.000466, -2.61e-07, 4.49e-11),
    (1, 33): (-0.148, 0.000861, -3.9e-07, 5.85e-11),
    (1, 34): (0.275, 0.000451, -2.56e-07, 4.45e-11),
    (1, 35): (0.202, 0.000565, -3.1e-07, 5.25e-11),
    (1, 36): (0.0276, 0.000806, -4.08e-07, 6.57e-11),
    (1, 37): (-0.00857, 0.00084, -4.18e-07, 6.66e-11),
    (1, 38): (0.159, 0.000629, -3.38e-07, 5.65e-11),
    (1, 39): (0.262, 0.000465, -2.63e-07, 4.55e-11),
    (1, 40): (-0.18, 0.000895, -3.95e-07, 5.83e-11),
    (1, 41): (-0.181, 0.000898, -3.96e-07, 5.84e-11),
    (1, 42): (0.0987, 0.000721, -3.77e-07, 6.19e-11),
    (1, 43): (-0.00856, 0.000839, -4.18e-07, 6.65e-11),
    (1, 44): (-0.00856, 0.000839, -4.18e-07, 6.65e-11),
    (1, 45): (-0.00856, 0.000839, -4.18e-07, 6.65e-11),
    (1, 46): (-0.00855, 0.000838, -4.17e-07, 6.64e-11),
    (1, 47): (0.202, 0.000563, -3.09e-07, 5.23e-11),
    (1, 48): (0.122, 0.00069, -3.65e-07, 6.03e-11),
    (1, 49): (-0.0406, 0.000867, -4.25e-07, 6.69e-11),
    (1, 50): (-0.0407, 0.000868, -4.25e-07, 6.7e-11),
    (1, 51): (-0.142, 0.000922, -4.24e-07, 6.42e-11),
    (1, 52): (-0.142, 0.000923, -4.24e-07, 6.43e-11),
}

# Example initial values for Xi
np.random.seed(42)
Xi = np.random.uniform(0.0, 1.0, 53)  # Initial values, need normalization

# Normalize Xi values so that their sum equals 1
Xi_sum = np.sum(Xi)
Xi_normalized = [x / Xi_sum for x in Xi]

# Input the temperature in Kelvin
T = float(input("Enter the temperature in Kelvin: "))

# Calculate the total diffusion ratios
diffusion_ratio_H2 = calculate_diffusion_ratio(coefficients_gri_H2, Xi_normalized, T)
diffusion_ratio_H = calculate_diffusion_ratio(coefficients_gri_H, Xi_normalized, T)

print("Thernal Diffustion Ratio - CHEMKIN")
print(f"Total diffusion ratio for H2 at {T} K: {diffusion_ratio_H2:.3e}")
print(f"Total diffusion ratio for H at {T} K: {diffusion_ratio_H:.3e}")
