@kernel void thermoCoeffs(const int n_states,
                          const int offsetT,
                          const int offset,
                          const double pressure_R,
                          @restrict const dfloat* state,
                          @restrict dfloat* rho,
                          @restrict dfloat* cp,
                          @restrict dfloat* rhoCp,
                          const double Tref)
{
  for(int id = 0; id < n_states; ++id; @tile(p_BLOCKSIZE,@outer,@inner)) {
    const cfloat T = Tref * state[id];
    const cfloat rcpT = 1 / T;
    const cfloat lnT = log(T);
    const cfloat T2 = T * T;
    const cfloat T3 = T * T * T;
    const cfloat T4 = T * T * T * T;

    cfloat wrk1[__NEKRK_NSPECIES__];
    cfloat rcpMbar = 0; 
    for(int k = 0; k < __NEKRK_NSPECIES__; k++) {
      const cfloat Yi = __NEKRK_MAX((cfloat) 0, (cfloat) state[id + offsetT + k*offset]);
      wrk1[k] = Yi * nekrk_rcp_molar_mass[k];
      rcpMbar += wrk1[k];
    }
    const cfloat Mbar = 1 / rcpMbar;

    const cfloat rho_ = pressure_R * rcpT * Mbar;

    rho[id] = rho_;

    cfloat cp_R[__NEKRK_NSPECIES__];
    nekrk_molar_heat_capacity_R(lnT,T,T2,T3,T4,rcpT,cp_R);

    cfloat mean_cp_R = 0;
    for(int k = 0; k < __NEKRK_NSPECIES__; k++) {
      cp[k * offset + id] = cp_R[k] * p_R * nekrk_rcp_molar_mass[k];
      mean_cp_R += cp_R[k] * wrk1[k]*Mbar;
    }
    rhoCp[id] =  rho_ * (mean_cp_R * p_R * rcpMbar);
  }
}
